---
description: Backend programming
alwaysApply: false
---
# Backend Rules (Django + DRF + MySQL)

## 1. Project Structure
- Each major feature should be in a separate app (e.g., `accounts`, `trips`, `generator`, `booking`).
- Common models should be placed in a `core` app to avoid duplication.

## 2. Database & Models
- All models must inherit from `models.Model` with default `id` primary key.
- Use `related_name` for relationships to avoid circular references.
- Add `verbose_name` and `db_index=True` for readability and performance.
- Keep migrations small and incremental.

## 3. API & DRF
- Always use ViewSet + Router to keep RESTful style.
- Use serializers.ModelSerializer; never return raw model objects in views.
- Each endpoint must define permissions (e.g., IsAuthenticated, IsAdminUser).
- When an endpoint is implemented, update API documentation with:
  - Path
  - Input parameters
  - Response format
- Do not modify already implemented APIs when adding or updating new ones (avoid breaking changes).
- All API responses must follow this JSON envelope:
```json
{
  "success": true,
  "data": {...},
  "message": "optional"
}

## 4.Auth & Security
- Use JWT (`djangorestframework-simplejwt`).
- Use `django-cors-headers` to allow only frontend domains.
- Enable CSRF only for necessary form submissions.\

## 5.Code Style
- Strictly follow **PEP8**.
- Each function â‰¤ 50 lines; move complex logic into `utils`.
- Important code must have **English comments**, even if the request is in Chinese.
- Always write **docstrings**, especially for AI itinerary generation modules.

## 6. Logging & Debugging
- Use Django logging configuration (settings.LOGGING) instead of print().
- Log error details with enough context (user id, API path, request params if safe).
- Never log sensitive data (passwords, tokens, PII).
- Each API should log both success and failure cases to help trace errors.
- Use clear and consistent log levels: DEBUG for development info, INFO for normal operations, WARNING for unusual events, ERROR for exceptions, CRITICAL for system-wide failures.
- When exceptions are caught, log stack traces with logger.exception() for better debugging.

